plugins {
    //프로젝트의 스프링부트 프레임워크 버전 설정
    id 'org.springframework.boot' version '2.7.2'
    //프로젝트에 필요한 라이브러리를 관리해주는 툴(매니지먼트)의 버전
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    //쓰는 언어
    id 'java'
}
//project 정보
group = 'web.webproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
//dependency 라이브러리를 다운 받은 사이트
repositories {
    mavenCentral()
}

dependencies {
    //lombok : 도메인(class)이 가져야할 getter, setter, builder등을 자동으로 코드 생성(단 컴파일에서만)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //compile: 자바코드를 실행가능한 바이트 코드로 변경(바이트코드로 실행하면 컴퓨터는 인식하고 실행)
    //runtime: 실행 가능한 (컴파일이 완료된)코드를 실행하는 시점
    //인터프리터: 실시간으로 개발한 코드를 해석해서 컴퓨터를 실행하는것
    //라이브러리: 가져다 쓰는것 (자바 기본규칙에 따름)
    //프레임워크 : 프레임워크의 독자적인 구조와 규칙에 따름
    //implementation: 구현된 전체에서 사용하는 라이브러리(프레임워크)
    //thymeleaf: HTML 과 자바 코드 연동하는 템플릿(단, 서버에서 사용)
    //starter:스프링부트에서 쓰는 기본 라이브러리 집합
    //JPA : java Persistence API: 자바에서 DB와 연결되는 객체지향 API(Aplication 인터페이스)

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
   //Junit 유닛테스트(자바코드를 만들면 잘돌아가는지 기능별로 테스트 할때 좋음)
   //devtools 개발하는데 편리한 기능들의 집합

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //Db 오라클 접속에 필요한 라이브러리
    //오라클에서 제공하는 라이브러리로 JAVA와 연동 하기 위해 쓰임 (8버전이 19C에 활용가능)
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    implementation 'com.oracle.database.security:oraclepki'
    implementation 'com.oracle.database.security:osdt_core'
    implementation 'com.oracle.database.security:osdt_cert'


    //oraclepki, osdtcore, osdt_cert 오라클과 자바 사이에서 연동되는 드라이버를 사용하기 위한 정보가 담긴 라이브러리
    //드라이버 : 예) 그래픽카드를 컴퓨터와 연결하기 위해서 드라이버를 다운 받아 컴퓨터가 그래픽카드를 드라이버 를 통해 사용
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
